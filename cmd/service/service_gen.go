// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	endpoint "github.com/piusalfred/regsvc/pkg/endpoint"
	http1 "github.com/piusalfred/regsvc/pkg/http"
	service "github.com/piusalfred/regsvc/pkg/service"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"AddNode":       {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddNode", logger))},
		"AddRegion":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddRegion", logger))},
		"AddUser":       {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddUser", logger))},
		"DeleteNode":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteNode", logger))},
		"DeleteRegion":  {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteRegion", logger))},
		"DeleteUser":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteUser", logger))},
		"GetNodeById":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetNodeById", logger))},
		"GetRegionById": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetRegionById", logger))},
		"GetUserById":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetUserById", logger))},
		"ListNodes":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListNodes", logger))},
		"ListRegions":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListRegions", logger))},
		"ListUsers":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListUsers", logger))},
		"Login":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Login", logger))},
		"Register":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Register", logger))},
		"UpdateNode":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateNode", logger))},
		"UpdateRegion":  {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateRegion", logger))},
		"UpdateUser":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateUser", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["Register"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Register")), endpoint.InstrumentingMiddleware(duration.With("method", "Register"))}
	mw["Login"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Login")), endpoint.InstrumentingMiddleware(duration.With("method", "Login"))}
	mw["AddUser"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddUser")), endpoint.InstrumentingMiddleware(duration.With("method", "AddUser"))}
	mw["GetUserById"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetUserById")), endpoint.InstrumentingMiddleware(duration.With("method", "GetUserById"))}
	mw["ListUsers"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ListUsers")), endpoint.InstrumentingMiddleware(duration.With("method", "ListUsers"))}
	mw["DeleteUser"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteUser")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteUser"))}
	mw["UpdateUser"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateUser")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateUser"))}
	mw["AddNode"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddNode")), endpoint.InstrumentingMiddleware(duration.With("method", "AddNode"))}
	mw["GetNodeById"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetNodeById")), endpoint.InstrumentingMiddleware(duration.With("method", "GetNodeById"))}
	mw["ListNodes"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ListNodes")), endpoint.InstrumentingMiddleware(duration.With("method", "ListNodes"))}
	mw["DeleteNode"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteNode")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteNode"))}
	mw["UpdateNode"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateNode")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateNode"))}
	mw["AddRegion"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddRegion")), endpoint.InstrumentingMiddleware(duration.With("method", "AddRegion"))}
	mw["GetRegionById"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetRegionById")), endpoint.InstrumentingMiddleware(duration.With("method", "GetRegionById"))}
	mw["ListRegions"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ListRegions")), endpoint.InstrumentingMiddleware(duration.With("method", "ListRegions"))}
	mw["DeleteRegion"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteRegion")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteRegion"))}
	mw["UpdateRegion"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateRegion")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateRegion"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"Register", "Login", "AddUser", "GetUserById", "ListUsers", "DeleteUser", "UpdateUser", "AddNode", "GetNodeById", "ListNodes", "DeleteNode", "UpdateNode", "AddRegion", "GetRegionById", "ListRegions", "DeleteRegion", "UpdateRegion"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
